{"ast":null,"code":"import API from 'utils/API';\nconst base = {\n  apiUser: 'https://reqres.in/api'\n};\nexport const getDatas = (settings = {}, payload = {}) => () => new Promise((resolve, reject) => {\n  const url = base[settings.base] + settings.url;\n  return API[settings.method](url, payload).then(response => {\n    const {\n      data,\n      meta\n    } = response.data;\n\n    if (meta.status) {\n      resolve({\n        data,\n        meta\n      });\n    } else {\n      reject(meta.message);\n    }\n  }).catch(err => {\n    reject(err);\n  });\n});","map":{"version":3,"sources":["/Users/fahrasnurhidayat/Documents/Fahras/Public/Portofolio/ibid-fe-test/actions/Options.js"],"names":["API","base","apiUser","getDatas","settings","payload","Promise","resolve","reject","url","method","then","response","data","meta","status","message","catch","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,OAAO,EAAE;AADE,CAAb;AAIA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAQ,GAAG,EAAZ,EAAgBC,OAAO,GAAG,EAA1B,KACtB,MACE,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,QAAMC,GAAG,GAAGR,IAAI,CAACG,QAAQ,CAACH,IAAV,CAAJ,GAAsBG,QAAQ,CAACK,GAA3C;AAEA,SAAOT,GAAG,CAACI,QAAQ,CAACM,MAAV,CAAH,CACLD,GADK,EAELJ,OAFK,EAGLM,IAHK,CAIJC,QAAD,IAAc;AACZ,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiBF,QAAQ,CAACC,IAAhC;;AACA,QAAIC,IAAI,CAACC,MAAT,EAAiB;AACfR,MAAAA,OAAO,CAAC;AAAEM,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,CAAP;AACD,KAFD,MAEO;AACLN,MAAAA,MAAM,CAACM,IAAI,CAACE,OAAN,CAAN;AACD;AACF,GAXI,EAYLC,KAZK,CAYEC,GAAD,IAAS;AACfV,IAAAA,MAAM,CAACU,GAAD,CAAN;AACD,GAdM,CAAP;AAeD,CAlBD,CAFG","sourcesContent":["import API from 'utils/API'\n\nconst base = {\n  apiUser: 'https://reqres.in/api',\n}\n\nexport const getDatas = (settings = {}, payload = {}) => (\n  () => (\n    new Promise((resolve, reject) => {\n      const url = base[settings.base] + settings.url\n\n      return API[settings.method](\n        url,\n        payload,\n      ).then(\n        (response) => {\n          const { data, meta } = response.data\n          if (meta.status) {\n            resolve({ data, meta })\n          } else {\n            reject(meta.message)\n          }\n        },\n      ).catch((err) => {\n        reject(err)\n      })\n    })\n  )\n)\n"]},"metadata":{},"sourceType":"module"}